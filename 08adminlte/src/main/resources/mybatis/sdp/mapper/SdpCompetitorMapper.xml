<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sportradar.sdh.dao.sdp.SdpCompetitorDao">
	<resultMap id="BaseResultMap" type="com.sportradar.sdh.domain.sdp.Competitor">
		<!--
		<constructor>
			<idArg column="sportId" javaType="Long"/>
			<arg column="dgtSportIds" javaType="String"/>
			<arg column="brSportIds" javaType="String"/>
		</constructor>
		-->
        <id column="competitorId" property="competitorId" jdbcType="BIGINT" />
		<result column="competitorFullName" property="competitorFullName" jdbcType="VARCHAR"/>
		<result column="competitorShortName" property="competitorShortName" jdbcType="VARCHAR"/>

		<result column="alias" property="alias" jdbcType="VARCHAR"/>
        <result column="regionNum" property="regionNum" jdbcType="INTEGER"/>
        <result column="sportId" property="sportId" jdbcType="BIGINT"/>

		<result column="languageCode" property="language.languageCode"/>
		<result column="languageName" property="language.languageName"/>
		<!--<result column="competitorXRefs" property="competitorXRefs" jdbcType="VARCHAR"/>-->
		<!--<result column="competitorXRefs" property="competitorXRefs" jdbcType="VARCHAR" javaType="java.util.List" typeHandler="com.betmatrix.theonex.dao.sdp.handler.CompetitorHandler"></result>

		<result column="dgtSportIds" property="dgtSportXRefs" jdbcType="VARCHAR" javaType="java.util.List" typeHandler="typehandler.DgtSportListHandler"/>
		<result column="brSportIds" property="brSportXRefs" jdbcType="VARCHAR" javaType="java.util.List" typeHandler="typehandler.BrSportListHandler"/>
		-->
	</resultMap>

	<resultMap id="languageResult" type="com.sportradar.sdh.domain.common.Language">
		<result property="languageCode" column="languageCode" jdbcType="INTEGER"/>
		<result property="languageName" column="languageName" jdbcType="VARCHAR"/>
	</resultMap>

	<sql id="Base_Column_List">
    	competitorId, competitorFullName, competitorShortName, alias, tshirt, regionNum, sportId, updatedTime
    	<!-- , CONCAT(competitorId, '|', competitorXRefs) as competitorXRefs -->
	</sql>

	<sql id="Language_Column_List">
    	c.competitorId,
    	IFNULL(ci.competitorFullName,c.competitorFullName) AS competitorFullName,
    	IFNULL(ci.competitorShortName,c.competitorShortName) AS competitorShortName,
    	IFNULL(ci.alias,c.alias) AS alias,
    	IFNULL(l.languageCode, 1) AS languageCode, IFNULL(l.languageName, 'English') AS languageName
	</sql>
	<!--
	<sql id="Base_Column_List">
    	sportId, sportName, priority, updatedTime,
    	SUBSTRING_INDEX(SUBSTRING_INDEX(sportIdXRefs, '|', 2), '|', -1) as brSportIds,
    	SUBSTRING_INDEX(sportIdXRefs, '|', 1) as dgtSportIds
	</sql>

	<sql id="Language_Column_List">
    	s.sportId, IFNULL(si.sportName,s.sportName) AS sportName, s.priority,
    	s.updatedTime, SUBSTRING_INDEX(SUBSTRING_INDEX(s.sportIdXRefs, '|', 2), '|', -1) as brSportIds,
    	SUBSTRING_INDEX(s.sportIdXRefs, '|', 1) as dgtSportIds,
    	IFNULL(si.languageCode, 1) AS languageCode, IFNULL(l.languageName, 'English') AS languageName
	</sql>
	-->

	<sql id="Language_Table_Join">
		FROM Competitor c
		LEFT JOIN Competitor_I18N ci ON c.competitorId = ci.competitorId
		LEFT JOIN Language l  ON ci.languageCode = l.languageCode
	</sql>

	<select id="findById" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List"/>
		from Competitor
		where competitorId = #{competitorId}
	</select>

	<select id="countById" resultType="java.lang.Integer">
		select COUNT(*)
		from Competitor
		where competitorId = #{competitorId}
	</select>

	<select id="findNextId" resultType="java.lang.Long">
		SELECT MAX(competitorId)+1 FROM Competitor;
	</select>

	<select id="findAll" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"/>
		from Competitor
	</select>

	<select id="findByPage" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"/>
		from Competitor
	</select>

	<!--回传所有已设定语系翻译值，仅包含i18N里有储存的 -->
	<select id="findAllWithLanguage" resultMap="BaseResultMap">
		SELECT
		<include refid="Language_Column_List"/>
		<include refid="Language_Table_Join"/>
	</select>

	<!--回传某一指定sportId的所有已设定语系翻译值，仅包含i18N里有储存的 -->
	<select id="findByIdWithLanguage" resultMap="BaseResultMap">
		SELECT
		<include refid="Language_Column_List"/>
		<include refid="Language_Table_Join"/>
		WHERE c.competitorId = #{competitorId}
	</select>

	<!--回传某一指定sportId的指定语系翻译值，仅包含i18N里有储存的 -->
	<select id="findByIdAndLanguageCodeWithLanguage" resultMap="BaseResultMap">
		SELECT
		<include refid="Language_Column_List"/>
		<include refid="Language_Table_Join"/>
		WHERE s.competitorId = #{competitorId} AND ci.languageCode = #{languageCode}
	</select>

	<!--回传某一指定competitorId的所有语系翻译值，包含i18N里没有储存的 -->
	<select id="findByIdWithAllLanguage" resultMap="BaseResultMap">
SELECT allLang.competitorId,
    	IFNULL(ci.competitorFullName,allLang.competitorFullName) AS competitorFullName,
    	IFNULL(ci.competitorShortName,allLang.competitorShortName) AS competitorShortName,
    	IFNULL(ci.alias,allLang.alias) AS alias,
    	IFNULL(allLang.languageCode, 1) AS languageCode, IFNULL(allLang.languageName, 'English') AS languageName
FROM 	(SELECT c.competitorId, c.competitorFullName, c.competitorShortName, c.alias,
			c.updatedTime, l.languageCode, l.languageName
			  FROM Competitor c, Language l WHERE c.competitorId = #{competitorId}) allLang
		LEFT JOIN Competitor_I18N ci ON allLang.competitorId = ci.competitorId AND allLang.languageCode = ci.languageCode
	</select>
	<!--
	<select id="findByIdWithAllLanguage" resultMap="BaseResultMap">
		SELECT allLang.sportId, IFNULL(si.sportName,allLang.sportName) AS sportName,allLang.priority, allLang.updatedTime, allLang.brSportIds, allLang.dgtSportIds, allLang.languageCode, allLang.languageName
		FROM
			(SELECT s.sportId, s.sportName, s.priority, s.updatedTime,
				SUBSTRING_INDEX(SUBSTRING_INDEX(s.sportIdXRefs, '|', 2), '|', -1) as brSportIds,
				SUBSTRING_INDEX(s.sportIdXRefs, '|', 1) as dgtSportIds,
				l.languageCode, l.languageName
			  FROM Sport s, Language l WHERE s.sportId = #{sportId}) allLang
		LEFT JOIN Sport_I18N si ON allLang.sportId = si.sportId AND allLang.languageCode = si.languageCode
	</select>
	-->

	<insert id="insertI18N" parameterType="com.sportradar.sdh.domain.sdp.Competitor">
-- 		INSERT INTO Competitor_I18N (competitorId, languageCode, competitorFullName, competitorShortName, alias, updatedTime)
-- 		VALUES (#{sportId}, #{language.languageCode}, #{sportName}, #{updatedTime})
	</insert>

	<update id="updateI18N" parameterType="com.sportradar.sdh.domain.sdp.Competitor">
		UPDATE Competitor_I18N
		SET sportName = #{sportName}, updatedTime = #{updatedTime}
		WHERE  sportId=#{sportId} AND languageCode=#{language.languageCode}
	</update>

	<insert id="insertData" parameterType="com.sportradar.sdh.domain.sdp.Competitor">
		INSERT INTO Competitor (competitorFullName, competitorShortName, alias, tshirt, regionNum, sportId, updatedTime)
		VALUES ( #{competitorFullName}, #{competitorShortName}, #{alias}, ${tshirt}, #{regionNum}, #{sportId}, #{updatedTime})
	</insert>

	<update id="updateData" parameterType="com.sportradar.sdh.domain.sdp.Competitor">
		UPDATE Competitor
		SET competitorFullName = #{competitorFullName},
		competitorShortName = #{competitorShortName},
		alias = #{alias},
		tshirt = #{tshirt},
		updatedTime = #{updatedTime}
		WHERE  competitorId=#{competitorId}
	</update>

	<update id="updatePair">
		UPDATE Competitor
		SET competitorXRefs = #{competitorXRefs}
		WHERE  competitorId=#{competitor.competitorId}
	</update>
</mapper>